<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/4QCuRXhpZgAATU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAAZKG
        AAcAAAB6AAAALAAAAABVTklDT0RFAABDAFIARQBBAFQATwBSADoAIABnAGQALQBqAHAAZQBnACAAdgAx
        AC4AMAAgACgAdQBzAGkAbgBnACAASQBKAEcAIABKAFAARQBHACAAdgA2ADIAKQAsACAAcQB1AGEAbABp
        AHQAeQAgAD0AIAA3ADUACv/+ADxDUkVBVE9SOiBnZC1qcGVnIHYxLjAgKHVzaW5nIElKRyBKUEVHIHY2
        MiksIHF1YWxpdHkgPSA3NQoA/9sAQwAIBgYHBgUIBwcHCQkICgwUDQwLCwwZEhMPFB0aHx4dGhwcICQu
        JyAiLCMcHCg3KSwwMTQ0NB8nOT04MjwuMzQy/9sAQwEJCQkMCwwYDQ0YMiEcITIyMjIyMjIyMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy/8AAEQgAtAC0AwEiAAIRAQMRAf/EAB8A
        AAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFB
        BhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldY
        WVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfI
        ycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYH
        CAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy
        0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWG
        h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz
        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
</value>
  </data>
</root>